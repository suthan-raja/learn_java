Data structure

A data structure is a meaningful way of arranging and storing data in a computer (RAM) so as to use it efficiently .

Data structure have a 3 types

    1. Linear
    2. Non - Linear
    3. Associative

1. Linear

    Linear Have 2 types that are ,

        1.1. static
        1.2. dynamic

1.1 static

    Static Have one Data Structure that is Array .

1.2 dynamic

    Dynamic Have Some Data structure they are ,

        1. Linked List
        2. Stack
        3. Queue

2. Non - Linear

    Non - Linear have two type of data structure they are ,

        2.1 Tree
        2.2 Graph

3. Associative

    Associative have one data structure that is Hash Maps.

Algorithms

    An algorithms is step by step unambiguous set of instruction for solving problem.

    we can define algorithms for simple real life scenarios like making a pack of noodles to something like
    playing or suggesting the best photo.

    From washing machines to self-driving cars every deterministic action can be using an algorithm.


 -------------------------------------------------------------------------------------------------------------------------------

Topic - 1                               Arrays

An array is linear collection of elements of the same type.

Arrays are used to store multiple values in a  single variable , instead of declaring separate variables for each value.
Each Array location is accessed using an index, the indexing starts from 0.

                                    Advantages of Array

       * Simple and easy to use .
       * Fast insertion at the end of the array.  O(1) time
       * An array element can be accessed in constant time.

                                    Disadvantages of Array

       * Arrays have fixed size can't grow in memory once allocated.
       * Insertion is the middle requires shifting of elements. O(N) times
       * Since array requires linear memory block , such blocks might not be available especially if the array size is big.

-------------------------------------------------------------------------------------------------------------------------------

Java Collections Framework

    Java collections framework provides set of classes and interfaces, to manipulate , organise and perform operations on data
    without writing your own data structures from scratch.

    It provides you with data-structures and their associated methods that can do anything that you'll ever need to do.

Why use Java Collections Framework ?

    * Use in-build data structures come very handy when are you solving problems or building real software.

    * The data structures are highly optimised and also saves a lot of development time.

Java Collection Framework ?

    The Java Collection Framework package (java.util) contains

    1. A set of interfaces
    2. Implementation class
    3. Algorithms ( such as sorting and searching ).

DSA HIERARCHY ?

                                                 Collection

                                                     |
                                                     |

Interfaces -->    LIST                              SET                         QUEUE

                 ArrayList                        Hashset                      ArrayDeque
                 LinkedList                       LinkedHashset                LinkedList
                 Stack                            TreeSet                      PriorityQueue
                 Vector                           EnumSet

-------------------------------------------------------------------------------------------------------------------

Map --> HashMap , TreeMap , LinkedHashMap

    The Map interface is not subtype of the collection interface.
    Therefore it behaves a bit differently from the rest of the collection types.

-------------------------------------------------------------------------------------------------------------------

Collection Interface

    * A collection represents a group of objects knows as its elements.
    * The collection interface is used to pass around collections of objects where maximum generality is desired.
    For Example , that you have a Collection<String> c,which may be a List , a Set , or another kind of Collection.

Collection Interface methods :

    The collection interface contains methods that perform basic operations, such as int size () , boolean isEmpty () ,
    boolean contains (Object element) , boolean add (E element) , boolean remove (Object element) , and Iterator<E> iterator ().

    It also contains methods that operate on entire collections , such as boolean containsAll (Collection<?> c)
    , boolean addAll ( Collection<? extends E> c ) , boolean addAll ( Collection <?> c ),boolean removeAll ( Collection <?> c),
    boolean retainAll ( Collection<?> c) , and void clear () .

--------------------------------------------------------------------------------------------------------------------

You can do anything that too efficiently

    * Create a list you can easily keep adding to using an ArrayList.
    * Search a food item's price by its name using a Hashmap.
    * Sort a list of students by their marks using a Comparator.
    * Find the top most ordered items using Priority Queue.
    * Filter out duplicate records using a Hashset.
    * Build a Rate Limiting Algorithm using a Queue.

----------------------------------------------------------------------------------------------------------------------

1. ArrayList

   * An array list dynamic array for storing elements. It is like an array , but with no size limit.
   * ArrayList class maintains insertion order.
   * we can add or remove elements.
   * In java it implements the List Interface so that we can use all methods of List interface here.

   1.1 ArrayList Implementation

    * One way of implementing array-list is to initially start with some fixed size array , as soon as that array becomes full,
      create a new array double size of original array.

    * Copy the elements from the old array, in the new array and delete the old array.

    * If 70% Fill the array after double size to create new array and store old arrays values and remove the old array.

   1.2 ArrayList Features

    * Dynamic Resizing : ArrayList grows dynamically as we added elements to the list or shrinks as we remove elements
      from the list.

    * Ordered          : ArrayList preserves the order of the elements.


   1.3 ArrayList Features

    * Index Based      : ArrayList in java supports random access from the list using index positions starting with '0'.

    * Object Based     : Arraylist can store only Objects data types. They cannot be used for primitive types ( int , float , etc).
                         We require a wrapper class in that case.

    * Not synchronized : ArrayList in java is not synchronized , we can use the Vector class for the synchronized version.

    Vector can be used an alternative to ArrayList class if synchronisation is required. It means ArrayList operations are
    not thread safe and multiple threads should not operate on the ArrayList object at the same time.

   1.4 ArrayList Operations

    * Random access takes O(1) time.
    * Adding element takes amortised constant time O(1).
    * Inserting / Deleting takes O(n) time.
    * Searching takes O(n) time for unsorted array and O(log n) for sorted one.

   1.5 Basic syntax

    Doesn't work with primitive data types , have to use wrapper classes

    ArrayList<Type> arr = new ArrayList<Type>();

                    ( OR )

    List<Integer> arr = new ArrayList<>();

    * We can store Objects of various types in this ArrayList instance.

    * Empty ArrayList with initial capacity 10

    * If you want to create an ArrayList instance which can store Objects of multiple data type don't parameterize the instance.

    ArrayList arr = new ArrayList<>();

    arr.add(Integer.valueOf(1));
    arr.add(String.valueOf("Suthan"));

------------------------------------------------------------------------------------------------------------------------

2. LinkedList

    * A LinkedList is a linear data structure , in which elements are represented as objects and stored in non-contiguous
      memory locations.

    * It has 2 node one contain value and next one contain next value address.

    2.1 Linked List Implementation

        * In Linked List, we don't have to specify the size of the list as a linked list is a dynamic data structure and
          it automatically changes size when an element is added or removed.

        * Each node object stores two things, one is the data (value) and the second is the memory location of the next or previous
          or both and previous object's address.

        * Also, the nodes of the linked list are not stored in a contiguous memory location, they are linked each other with the
          help of next and previous pointers.

     2.2 Creating Linked List

          LinkedList<Integer> list = new linkedList<>();

     2.3 Linked List Features

        * A linked list provides us the ability to use the non-contiguous memory locations as a contiguous memory location.

        * It is a dynamic data structure, hence there is no need to pre-allocate the memory. This results is efficient
          utilization of the memory.

        * Also unlike the dynamic array, Insertion and deletion at the ends of the linked list are performed in constant time.

        * Concatenation of two linked lists is much more efficient in terms of time as well as in terms of space.


3. Doubly Linked List

    * Doubly Linked List can be traversed in both ways head to tails and tail to head. For this, each object stores data
      and memory location of next objects as well as the memory location of previous object.

4. Stack

    * Just like arrays and linked lists, a stack is a linear data structure that issued for storing data.

    * Its looks like a real-life stack such as stack of books, stack of plates etc.

    * Stack is an ordered list in which insertion and deletion are done at one end, where the end is generally called
      the top.

    * The element inserted at last the is the first one to get removed , hence it is called Last in First out Data Structure.

    4.1 Stack Implementation

        * Fixed Size Array

        * Dynamic Array

        * Linked List

    4.2 Stack Features

        * Stacks differ from the arrays in a way that in arrays random access is possible. this means that we can access
          any element just by using its index in the array. whereas, in a stack only limited access is possible and only
          top element is directly available.

        * Stacks are generally dynamic in nature. this means that they do not have a fixed size can be increased or decreased
          depending upon the number of elements.

    4.3 Stack Operations

        * push()
        * pop()
        * peak()

5. Queue

    * A queue is just like a  real-life queue, is a sequence of objects waiting to be served in the sequential order
      starting from the beginning of the queue. Queue maintains First in First Out (FIFO) ordering of data.

    * Examples - Queue of cars at toll both, people standing in a line to buy tickets.

    * Insertion happens at the rear end of the queue whereas deletion happens at the front end of the queue. The front of the
      queue is returned using the peek operation.


    5.1 First in First out Queue Implementation

        * Fixe Size Array ( Circular Array )

        * Dynamic Array

        * Queue using a Linked List

    5.2 Queue Limitations

        * A queue is not readily searchable :

            You might have to maintain another queue to store the dequeued elements in search of the wanted element.

        * Traversal possibly only once      :

            The front most element needs to be dequeued to access the element behind it, this happens throughout queue
            while traversing through it. in this process the queue becomes empty.

    5.3 Queue operations

                      Exception     Special Value

        * Enqueue --> offer()       or add()

        * Dequeue --> poll()        or remove()

        * peek    --> peek()        or element()


6. Deque

    * Deque a linear data structure that allows insertion and deletion of elements a both ends. Deque is an acronym for
      double-ended queue.

    6.1 Deque Implementation

      * Linked List
      * Array Deque

      * Array Deque and Linked List are the commonly used deque implementations.

      * The ArrayDeque class in java is an implementation of the Deque interface that uses a resizable array to store its element.
        Deque in java is a subtype of the Queue interface in  java.util package.

      * Iterable extends -->  Collection extends --> Queue extends --> Deque extends <-- ArrayDeque implements Deque Interface.

      * The ArrayDeque class provides constant-time performance for inserting and removing elements from both ends of the queue,
        making it a good choice for scenarios where you need to perform many add and remove operations.

    6.2 Deque Operations

       Add Values :
            * offer() --> offerLast() --> offerFirst() its return special value if its error.
            * add() --> addFirst() --> addLast() its throws error when it occur error.

       Remove Values :
            * poll() --> pollFirst() --> pollLast() its return special value if its occur error.
            * remove() --> removeFirst() --> removeLast() its throw error for when its occur error.

       Fetch Values  :
            * peek() --> peekFirst() --> peekLast() its return special value if its occur error.
            * get() --> getFirst() --> getLast()  its throw error for when its occur error.













